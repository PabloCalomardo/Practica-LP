# Generated from exprs.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,21,115,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,
        1,6,1,6,1,7,1,7,1,7,1,8,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,11,
        1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,14,1,14,1,14,1,14,
        1,14,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,
        1,17,1,18,4,18,100,8,18,11,18,12,18,101,1,19,4,19,105,8,19,11,19,
        12,19,106,1,20,4,20,110,8,20,11,20,12,20,111,1,20,1,20,0,0,21,1,
        1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,
        14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,1,0,3,1,0,97,122,1,
        0,48,57,3,0,9,10,13,13,32,32,117,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,
        0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,
        0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,
        0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,
        0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,1,43,1,0,0,0,3,45,1,0,0,
        0,5,47,1,0,0,0,7,49,1,0,0,0,9,51,1,0,0,0,11,53,1,0,0,0,13,55,1,0,
        0,0,15,58,1,0,0,0,17,61,1,0,0,0,19,64,1,0,0,0,21,66,1,0,0,0,23,68,
        1,0,0,0,25,71,1,0,0,0,27,77,1,0,0,0,29,80,1,0,0,0,31,85,1,0,0,0,
        33,89,1,0,0,0,35,95,1,0,0,0,37,99,1,0,0,0,39,104,1,0,0,0,41,109,
        1,0,0,0,43,44,5,94,0,0,44,2,1,0,0,0,45,46,5,42,0,0,46,4,1,0,0,0,
        47,48,5,47,0,0,48,6,1,0,0,0,49,50,5,43,0,0,50,8,1,0,0,0,51,52,5,
        45,0,0,52,10,1,0,0,0,53,54,5,61,0,0,54,12,1,0,0,0,55,56,5,60,0,0,
        56,57,5,62,0,0,57,14,1,0,0,0,58,59,5,60,0,0,59,60,5,61,0,0,60,16,
        1,0,0,0,61,62,5,62,0,0,62,63,5,61,0,0,63,18,1,0,0,0,64,65,5,60,0,
        0,65,20,1,0,0,0,66,67,5,62,0,0,67,22,1,0,0,0,68,69,5,58,0,0,69,70,
        5,61,0,0,70,24,1,0,0,0,71,72,5,119,0,0,72,73,5,114,0,0,73,74,5,105,
        0,0,74,75,5,116,0,0,75,76,5,101,0,0,76,26,1,0,0,0,77,78,5,105,0,
        0,78,79,5,102,0,0,79,28,1,0,0,0,80,81,5,116,0,0,81,82,5,104,0,0,
        82,83,5,101,0,0,83,84,5,110,0,0,84,30,1,0,0,0,85,86,5,101,0,0,86,
        87,5,110,0,0,87,88,5,100,0,0,88,32,1,0,0,0,89,90,5,119,0,0,90,91,
        5,104,0,0,91,92,5,105,0,0,92,93,5,108,0,0,93,94,5,101,0,0,94,34,
        1,0,0,0,95,96,5,100,0,0,96,97,5,111,0,0,97,36,1,0,0,0,98,100,7,0,
        0,0,99,98,1,0,0,0,100,101,1,0,0,0,101,99,1,0,0,0,101,102,1,0,0,0,
        102,38,1,0,0,0,103,105,7,1,0,0,104,103,1,0,0,0,105,106,1,0,0,0,106,
        104,1,0,0,0,106,107,1,0,0,0,107,40,1,0,0,0,108,110,7,2,0,0,109,108,
        1,0,0,0,110,111,1,0,0,0,111,109,1,0,0,0,111,112,1,0,0,0,112,113,
        1,0,0,0,113,114,6,20,0,0,114,42,1,0,0,0,4,0,101,106,111,1,6,0,0
    ]

class exprsLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    WRITE = 13
    IF = 14
    THEN = 15
    END = 16
    WHILE = 17
    DO = 18
    VAR = 19
    NUM = 20
    WS = 21

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'^'", "'*'", "'/'", "'+'", "'-'", "'='", "'<>'", "'<='", "'>='", 
            "'<'", "'>'", "':='", "'write'", "'if'", "'then'", "'end'", 
            "'while'", "'do'" ]

    symbolicNames = [ "<INVALID>",
            "WRITE", "IF", "THEN", "END", "WHILE", "DO", "VAR", "NUM", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "WRITE", "IF", 
                  "THEN", "END", "WHILE", "DO", "VAR", "NUM", "WS" ]

    grammarFileName = "exprs.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None



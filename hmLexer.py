# Generated from hm.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,13,69,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,
        6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,1,0,
        1,0,1,1,1,1,1,2,1,2,1,2,1,3,1,3,1,3,1,4,1,4,1,5,4,5,41,8,5,11,5,
        12,5,42,1,6,4,6,46,8,6,11,6,12,6,47,1,7,4,7,51,8,7,11,7,12,7,52,
        1,8,4,8,56,8,8,11,8,12,8,57,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,
        1,12,1,12,0,0,13,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,
        11,23,12,25,13,1,0,4,1,0,48,57,1,0,97,122,1,0,65,90,2,0,10,10,32,
        32,72,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,
        0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,
        0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,1,27,1,0,0,0,3,29,1,0,0,
        0,5,31,1,0,0,0,7,34,1,0,0,0,9,37,1,0,0,0,11,40,1,0,0,0,13,45,1,0,
        0,0,15,50,1,0,0,0,17,55,1,0,0,0,19,61,1,0,0,0,21,63,1,0,0,0,23,65,
        1,0,0,0,25,67,1,0,0,0,27,28,5,40,0,0,28,2,1,0,0,0,29,30,5,41,0,0,
        30,4,1,0,0,0,31,32,5,45,0,0,32,33,5,62,0,0,33,6,1,0,0,0,34,35,5,
        58,0,0,35,36,5,58,0,0,36,8,1,0,0,0,37,38,5,92,0,0,38,10,1,0,0,0,
        39,41,7,0,0,0,40,39,1,0,0,0,41,42,1,0,0,0,42,40,1,0,0,0,42,43,1,
        0,0,0,43,12,1,0,0,0,44,46,7,1,0,0,45,44,1,0,0,0,46,47,1,0,0,0,47,
        45,1,0,0,0,47,48,1,0,0,0,48,14,1,0,0,0,49,51,7,2,0,0,50,49,1,0,0,
        0,51,52,1,0,0,0,52,50,1,0,0,0,52,53,1,0,0,0,53,16,1,0,0,0,54,56,
        7,3,0,0,55,54,1,0,0,0,56,57,1,0,0,0,57,55,1,0,0,0,57,58,1,0,0,0,
        58,59,1,0,0,0,59,60,6,8,0,0,60,18,1,0,0,0,61,62,5,43,0,0,62,20,1,
        0,0,0,63,64,5,45,0,0,64,22,1,0,0,0,65,66,5,42,0,0,66,24,1,0,0,0,
        67,68,5,47,0,0,68,26,1,0,0,0,5,0,42,47,52,57,1,6,0,0
    ]

class hmLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    NUMBER = 6
    ID = 7
    CAP = 8
    WS = 9
    PLUS = 10
    MINUS = 11
    MULT = 12
    DIV = 13

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'('", "')'", "'->'", "'::'", "'\\'", "'+'", "'-'", "'*'", "'/'" ]

    symbolicNames = [ "<INVALID>",
            "NUMBER", "ID", "CAP", "WS", "PLUS", "MINUS", "MULT", "DIV" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "NUMBER", "ID", 
                  "CAP", "WS", "PLUS", "MINUS", "MULT", "DIV" ]

    grammarFileName = "hm.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


